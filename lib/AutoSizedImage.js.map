{"version":3,"sources":["../src/AutoSizedImage.js"],"names":["get","width","baseStyle","backgroundColor","AutoSizedImage","props","state","style","height","getSize","source","uri","w","h","setState","finalSize","ratio"],"mappings":"60BAAA,4B;AACA,yC;;AAEgB,wBAAWA,GAAX,CAAe,QAAf,C,CAATC,K,iBAAAA,K;;AAEP,GAAMC,WAAY;AAChBC,gBAAiB,aADD,CAAlB,C;;;AAIqBC,c;AACnB,wBAAYC,KAAZ,CAAmB;AACXA,KADW;AAEjB,MAAKC,KAAL,CAAa;;;AAGXL,MAAO,MAAKI,KAAL,CAAWE,KAAX,CAAiBN,KAAjB,EAA0B,CAHtB;AAIXO,OAAQ,MAAKH,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,EAA2B,CAJxB,CAAb,CAFiB;;AAQlB,C;;AAEmB;;AAElB,GAAI,KAAKH,KAAL,CAAWE,KAAX,CAAiBN,KAAjB,EAA0B,KAAKI,KAAL,CAAWE,KAAX,CAAiBC,MAA/C,CAAuD;AACrD;AACD;AACD,mBAAMC,OAAN,CAAc,KAAKJ,KAAL,CAAWK,MAAX,CAAkBC,GAAhC,CAAqC,SAACC,CAAD,CAAIC,CAAJ,CAAU;AAC7C,OAAKC,QAAL,CAAc,CAACb,MAAOW,CAAR,CAAWJ,OAAQK,CAAnB,CAAd;AACD,CAFD;AAGD,C;;AAEQ;AACP,GAAME,WAAY,EAAlB;AACA,GAAI,KAAKT,KAAL,CAAWL,KAAX,CAAmBA,KAAvB,CAA8B;AAC5Bc,UAAUd,KAAV,CAAkBA,KAAlB;AACA,GAAMe,OAAQf,MAAQ,KAAKK,KAAL,CAAWL,KAAjC;AACAc,UAAUP,MAAV,CAAmB,KAAKF,KAAL,CAAWE,MAAX,CAAoBQ,KAAvC;AACD;AACD,GAAMT,OAAQ;AACZL,SADY;AAEZ,KAAKG,KAAL,CAAWE,KAFC;AAGZ,KAAKD,KAHO;AAIZS,SAJY,CAAd;;AAMA,GAAIL,QAAS,EAAb;AACA,GAAI,CAACK,UAAUd,KAAX,EAAoB,CAACc,UAAUP,MAAnC,CAA2C;AACzCE,OAAS,SAAcA,MAAd,CAAsB,KAAKL,KAAL,CAAWK,MAAjC,CAAyC,KAAKJ,KAA9C,CAAT;AACD,CAFD,IAEO;AACLI,OAAS,SAAcA,MAAd,CAAsB,KAAKL,KAAL,CAAWK,MAAjC,CAAyCK,SAAzC,CAAT;AACD;;AAED,MAAO,mDAAO,MAAOR,KAAd,CAAqB,OAAQG,MAA7B,iDAAP;AACD,C,kEA1CkBN,c","file":"AutoSizedImage.js","sourcesContent":["import React, {PureComponent} from 'react';\nimport {Image, Dimensions} from 'react-native';\n\nconst {width} = Dimensions.get('window');\n\nconst baseStyle = {\n  backgroundColor: 'transparent',\n};\n\nexport default class AutoSizedImage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // set width 1 is for preventing the warning\n      // You must specify a width and height for the image %s\n      width: this.props.style.width || 1,\n      height: this.props.style.height || 1,\n    };\n  }\n\n  componentDidMount() {\n    //avoid repaint if width/height is given\n    if (this.props.style.width || this.props.style.height) {\n      return;\n    }\n    Image.getSize(this.props.source.uri, (w, h) => {\n      this.setState({width: w, height: h});\n    });\n  }\n\n  render() {\n    const finalSize = {};\n    if (this.state.width > width) {\n      finalSize.width = width;\n      const ratio = width / this.state.width;\n      finalSize.height = this.state.height * ratio;\n    }\n    const style = Object.assign(\n      baseStyle,\n      this.props.style,\n      this.state,\n      finalSize\n    );\n    let source = {};\n    if (!finalSize.width || !finalSize.height) {\n      source = Object.assign(source, this.props.source, this.state);\n    } else {\n      source = Object.assign(source, this.props.source, finalSize);\n    }\n\n    return <Image style={style} source={source} />;\n  }\n}\n"]}